## Environment variables containing secrets
## Meant to be loaded into Docker environment via Docker Compose
## When creating, search-replace secret{n} values with some generated passwords

# These are used when initializing the postgres service
POSTGRES_PASSWORD=secret1
EDD_PGPASS=secret2

# Django secret key
SECRET_KEY=put some random secret text here

# Database URL+credentials; format is psql://[USER]:[PASS]@[HOST]:[PORT]/[NAME]
DATABASE_URL=psql://edduser:secret2@postgres:5432/edd

# Cache URL for Redis
CACHE_URL=rediscache://redis:6379:1?client_class=django_redis.client.DefaultClient

# RabbitMQ image config
RABBITMQ_DEFAULT_PASS=secret3

# Rabbitmq URL+credentials; format is amqp://[USER]:[PASS]@[HOST]:[PORT]/[VHOST]
BROKER_URL=amqp://edd_user:secret3@rabbitmq:5672/edd

# Solr search URL; usually not a secret, and set via docker-compose.yml
#   Override here if using basic auth
# SEARCH_URL=solr://user:secret@solr:8983/solr/

# Flower config
AMQP_ADMIN_PASSWORD=secret3
AMQP_PASSWORD=secret3
FLOWER_BASIC_AUTH=flower:secret4
FLOWER_BROKER_API=http://edd_user:secret3@rabbitmq:15672/api/

# Celery Results Backend URL+credentials;
CELERY_RESULT_BACKEND=db+postgresql://edduser:secret2@postgres:5432/celery

# ICE<-->EDD
ICE_HMAC_KEY=put in HMAC secret here

# LDAP credentials
LDAP_PASS=put in LDAP password here

# Tell EDD which environment it's running in.
# Supported values are DEVELOPMENT, PRODUCTION, TEST, or any of those strings followed by an
# arbitrary suffix.
# DEVELOPMENT prefix will run the django development server and auto-restart when code changes are
# detected (NOT SUITABLE FOR PRODUCTION). When EDD-XXX is implemented, DEV/INT-prefixed values will
# also create obvious labeling differences in the UI to make them easy to distinguish.
EDD_DEPLOYMENT_ENVIRONMENT=PRODUCTION
