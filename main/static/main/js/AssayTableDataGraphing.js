// File last modified on: Wed Dec 21 2016 14:53:35  
/// <reference path="typescript-declarations.d.ts" />
/// <reference path="GraphHelperMethods.ts" />
var EDDATDGraphing;
EDDATDGraphing = {
    Setup: function () {
        EDDATDGraphing.graphDiv = $("#graphDiv");
    },
    clearAllSets: function () {
        d3.selectAll("svg").remove();
    },
    addNewSet: function (newSet) {
        var barAssayObj = GraphHelperMethods.concatAssays(newSet);
        //data for graphs
        //data for graphs
        var graphSet = {
            barAssayObj: GraphHelperMethods.concatAssays(newSet),
            create_x_axis: GraphHelperMethods.createXAxis,
            create_right_y_axis: GraphHelperMethods.createRightYAxis,
            create_y_axis: GraphHelperMethods.createLeftYAxis,
            x_axis: GraphHelperMethods.make_x_axis,
            y_axis: GraphHelperMethods.make_right_y_axis,
            individualData: newSet,
            assayMeasurements: barAssayObj,
            color: d3.scale.category10(),
            width: 750,
            height: 220
        };
        //create respective graphs
        createMultiLineGraph(graphSet, GraphHelperMethods.createSvg('.linechart'));
        if (!newSet.label) {
            $('#debug').text('Failed to fetch series.');
            return;
        }
    },
};
window.addEventListener('load', EDDATDGraphing.Setup, false);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzYXlUYWJsZURhdGFHcmFwaGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkFzc2F5VGFibGVEYXRhR3JhcGhpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0RBQW9EO0FBQ3BELHFEQUFxRDtBQUNyRCw4Q0FBOEM7QUFFOUMsSUFBSSxjQUFrQixDQUFDO0FBSXZCLGNBQWMsR0FBRztJQUVoQixLQUFLLEVBQUM7UUFFTCxjQUFjLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUUxQyxDQUFDO0lBR0QsWUFBWSxFQUFDO1FBRVosRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBR0QsU0FBUyxFQUFDLFVBQVMsTUFBTTtRQUVsQixJQUFJLFdBQVcsR0FBSSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFM0QsaUJBQWlCO1FBQ2pCLGlCQUFpQjtRQUNqQixJQUFJLFFBQVEsR0FBRztZQUNYLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO1lBQ3BELGFBQWEsRUFBRSxrQkFBa0IsQ0FBQyxXQUFXO1lBQzdDLG1CQUFtQixFQUFFLGtCQUFrQixDQUFDLGdCQUFnQjtZQUN4RCxhQUFhLEVBQUUsa0JBQWtCLENBQUMsZUFBZTtZQUNqRCxNQUFNLEVBQUUsa0JBQWtCLENBQUMsV0FBVztZQUN0QyxNQUFNLEVBQUUsa0JBQWtCLENBQUMsaUJBQWlCO1lBQzVDLGNBQWMsRUFBRSxNQUFNO1lBQ3RCLGlCQUFpQixFQUFFLFdBQVc7WUFDOUIsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQzVCLEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLEdBQUc7U0FDZCxDQUFDO1FBQ0YsMEJBQTBCO1FBQzFCLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUVqRixFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ25CLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUM7UUFDUixDQUFDO0lBQ0YsQ0FBQztDQUNELENBQUM7QUFHRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGxhc3QgbW9kaWZpZWQgb246IFdlZCBEZWMgMjEgMjAxNiAxNDo1MzozNSAgXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwidHlwZXNjcmlwdC1kZWNsYXJhdGlvbnMuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiR3JhcGhIZWxwZXJNZXRob2RzLnRzXCIgLz5cblxudmFyIEVEREFUREdyYXBoaW5nOmFueTtcblxuZGVjbGFyZSB2YXIgY3JlYXRlTXVsdGlMaW5lR3JhcGg7XG5cbkVEREFUREdyYXBoaW5nID0ge1xuXG5cdFNldHVwOmZ1bmN0aW9uKCkge1xuXG5cdFx0RUREQVRER3JhcGhpbmcuZ3JhcGhEaXYgPSAkKFwiI2dyYXBoRGl2XCIpO1xuXG5cdH0sXG5cblxuXHRjbGVhckFsbFNldHM6ZnVuY3Rpb24oKSB7XG5cblx0XHRkMy5zZWxlY3RBbGwoXCJzdmdcIikucmVtb3ZlKCk7XG5cdH0sXG5cdFxuXG5cdGFkZE5ld1NldDpmdW5jdGlvbihuZXdTZXQpIHtcblxuICAgICAgICB2YXIgYmFyQXNzYXlPYmogID0gR3JhcGhIZWxwZXJNZXRob2RzLmNvbmNhdEFzc2F5cyhuZXdTZXQpO1xuXG4gICAgICAgIC8vZGF0YSBmb3IgZ3JhcGhzXG4gICAgICAgIC8vZGF0YSBmb3IgZ3JhcGhzXG4gICAgICAgIHZhciBncmFwaFNldCA9IHtcbiAgICAgICAgICAgIGJhckFzc2F5T2JqOiBHcmFwaEhlbHBlck1ldGhvZHMuY29uY2F0QXNzYXlzKG5ld1NldCksXG4gICAgICAgICAgICBjcmVhdGVfeF9heGlzOiBHcmFwaEhlbHBlck1ldGhvZHMuY3JlYXRlWEF4aXMsXG4gICAgICAgICAgICBjcmVhdGVfcmlnaHRfeV9heGlzOiBHcmFwaEhlbHBlck1ldGhvZHMuY3JlYXRlUmlnaHRZQXhpcyxcbiAgICAgICAgICAgIGNyZWF0ZV95X2F4aXM6IEdyYXBoSGVscGVyTWV0aG9kcy5jcmVhdGVMZWZ0WUF4aXMsXG4gICAgICAgICAgICB4X2F4aXM6IEdyYXBoSGVscGVyTWV0aG9kcy5tYWtlX3hfYXhpcyxcbiAgICAgICAgICAgIHlfYXhpczogR3JhcGhIZWxwZXJNZXRob2RzLm1ha2VfcmlnaHRfeV9heGlzLFxuICAgICAgICAgICAgaW5kaXZpZHVhbERhdGE6IG5ld1NldCxcbiAgICAgICAgICAgIGFzc2F5TWVhc3VyZW1lbnRzOiBiYXJBc3NheU9iaixcbiAgICAgICAgICAgIGNvbG9yOiBkMy5zY2FsZS5jYXRlZ29yeTEwKCksXG4gICAgICAgICAgICB3aWR0aDogNzUwLFxuICAgICAgICAgICAgaGVpZ2h0OiAyMjBcbiAgICAgICAgfTtcbiAgICAgICAgLy9jcmVhdGUgcmVzcGVjdGl2ZSBncmFwaHNcbiAgICAgICAgY3JlYXRlTXVsdGlMaW5lR3JhcGgoZ3JhcGhTZXQsIEdyYXBoSGVscGVyTWV0aG9kcy5jcmVhdGVTdmcoJy5saW5lY2hhcnQnKSk7XG5cblx0XHRpZiAoIW5ld1NldC5sYWJlbCkge1xuXHRcdFx0JCgnI2RlYnVnJykudGV4dCgnRmFpbGVkIHRvIGZldGNoIHNlcmllcy4nKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH0sXG59O1xuXG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgRUREQVRER3JhcGhpbmcuU2V0dXAsIGZhbHNlKTtcbiJdfQ==