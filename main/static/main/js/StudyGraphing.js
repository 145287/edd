// File last modified on: Thu Oct 27 2016 15:57:37  
/// <reference path="../typings/d3/d3.d.ts"/>;
/// <reference path="GraphHelperMethods.ts" />
/// <reference path="StudyGraphingHelperMethods.ts" />
var StudyDGraphing;
StudyDGraphing = {
    Setup: function (graphdiv) {
        if (graphdiv) {
            this.graphDiv = $("#" + graphdiv);
        }
        else {
            this.graphDiv = $("#graphDiv");
        }
    },
    clearAllSets: function () {
        $('.tooMuchData').remove();
        var divs = this.graphDiv.siblings();
        if ($(divs[1]).find("svg").length == 0) {
            d3.selectAll("svg").remove();
        }
        else {
            for (var div = 1; div < divs.length; div++) {
                $(divs[div]).find("svg").remove();
            }
        }
    },
    addNewSet: function (newSet, type) {
        var buttonArr = StudyHelper.getButtonElement(this.graphDiv), selector = StudyHelper.getSelectorElement(this.graphDiv), type = StudyHelper.measurementType(type), buttons = {
            'line': buttonArr[0],
            'bar-empty': buttonArr[1],
            'bar-time': buttonArr[2],
            'bar-line': buttonArr[3],
            'bar-measurement': buttonArr[4]
        }, selectors = {
            'line': selector[1],
            'bar-time': selector[2],
            'bar-line': selector[3],
            'bar-measurement': selector[4]
        };
        /**
         * display grouped bar chart by measurement if most of the measurement types are protocol
         *  currently commented out because this is buggy
        **/
        //StudyHelper.showProteomicGraph(type, selectors, 'bar-measurement', buttons);
        //line chart
        $(buttons['line']).click(function (event) {
            event.preventDefault();
            StudyHelper.displayGraph(selectors, 'line');
            $('label.btn').removeClass('active');
            $(this).addClass('active');
            //hide graph option buttons
            $(buttons['bar-time']).addClass('hidden');
            $(buttons['bar-line']).addClass('hidden');
            $(buttons['bar-measurement']).addClass('hidden');
            return false;
        });
        // when user clicks bar button, show option buttons
        $(buttons['bar-empty']).click(function (event) {
            event.preventDefault();
            $(buttons['bar-time']).removeClass('hidden');
            $(buttons['bar-line']).removeClass('hidden');
            $(buttons['bar-measurement']).removeClass('hidden');
            $('label.btn').removeClass('active');
            $(this).addClass('active');
            return false;
        });
        //bar chart grouped by time
        $(buttons['bar-time']).click(function (event) {
            var rects = d3.selectAll('.barTime rect')[0];
            StudyHelper.buttonEventHandler(newSet, event, rects, 'bar-time', selectors, buttonArr);
        });
        //bar chart grouped by line name
        $(buttons['bar-line']).click(function (event) {
            var rects = d3.selectAll('.barAssay rect')[0];
            StudyHelper.buttonEventHandler(newSet, event, rects, 'bar-line', selectors, buttonArr);
        });
        //bar chart grouped by measurement
        $(buttons['bar-measurement']).click(function (event) {
            var rects = d3.selectAll('.barMeasurement rect')[0];
            StudyHelper.buttonEventHandler(newSet, event, rects, 'bar-measurement', selectors, buttonArr);
        });
        var barAssayObj = GraphHelperMethods.concatAssays(newSet);
        //data for graphs
        var graphSet = {
            barAssayObj: GraphHelperMethods.concatAssays(newSet),
            create_x_axis: GraphHelperMethods.createXAxis,
            create_right_y_axis: GraphHelperMethods.createRightYAxis,
            create_y_axis: GraphHelperMethods.createLeftYAxis,
            x_axis: GraphHelperMethods.make_x_axis,
            y_axis: GraphHelperMethods.make_right_y_axis,
            individualData: newSet,
            assayMeasurements: barAssayObj,
            width: 750,
            height: 220
        };
        //render different graphs
        createMultiLineGraph(graphSet, GraphHelperMethods.createSvg(selector[1]));
        createGroupedBarGraph(graphSet, GraphHelperMethods.createSvg(selector[2]), 'x');
        createGroupedBarGraph(graphSet, GraphHelperMethods.createSvg(selector[3]), 'name');
        createGroupedBarGraph(graphSet, GraphHelperMethods.createSvg(selector[4]), 'measurement');
        var rectAssayBar = d3.selectAll('.barAssay rect')[0];
        var rectMeasBar = d3.selectAll('.barMeasurement rect')[0];
        var rectTimeBar = d3.selectAll('.barTime rect')[0];
        if ($(selector[2]).css('display') === 'block') {
            StudyHelper.svgWidth(selector[2], rectTimeBar);
        }
        if ($(selector[3]).css('display') === 'block') {
            StudyHelper.svgWidth(selector[3], rectAssayBar);
        }
        if ($(selector[4]).css('display') === 'block') {
            StudyHelper.svgWidth(selector[4], rectMeasBar);
        }
        if (!newSet.label) {
            $('#debug').text('Failed to fetch series.');
            return;
        }
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3R1ZHlHcmFwaGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlN0dWR5R3JhcGhpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0RBQW9EO0FBQ3BELDhDQUE4QztBQUM5Qyw4Q0FBOEM7QUFDOUMsc0RBQXNEO0FBRXRELElBQUksY0FBa0IsQ0FBQztBQUt2QixjQUFjLEdBQUc7SUFFaEIsS0FBSyxFQUFDLFVBQVMsUUFBUTtRQUV0QixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ25DLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNQLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFCLENBQUM7SUFDUixDQUFDO0lBRUQsWUFBWSxFQUFDO1FBQ04sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksSUFBSSxHQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFckMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBRSxLQUFLLENBQUUsQ0FBQyxNQUFNLElBQUksQ0FBRSxDQUFDLENBQUEsQ0FBQztZQUN0QyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2xDLENBQUM7UUFDRCxJQUFJLENBQUMsQ0FBQztZQUNGLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO2dCQUN6QyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtB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QUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNwRCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzNDLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3JELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDM0MsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUNQLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQztRQUNSLENBQUM7SUFDRixDQUFDO0NBRUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgbGFzdCBtb2RpZmllZCBvbjogVGh1IE9jdCAyNyAyMDE2IDE1OjU3OjM3ICBcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL2QzL2QzLmQudHNcIi8+O1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIkdyYXBoSGVscGVyTWV0aG9kcy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiU3R1ZHlHcmFwaGluZ0hlbHBlck1ldGhvZHMudHNcIiAvPlxuXG52YXIgU3R1ZHlER3JhcGhpbmc6YW55O1xuXG5kZWNsYXJlIHZhciBjcmVhdGVNdWx0aUxpbmVHcmFwaDtcbmRlY2xhcmUgdmFyIGNyZWF0ZUdyb3VwZWRCYXJHcmFwaDtcblxuU3R1ZHlER3JhcGhpbmcgPSB7XG5cblx0U2V0dXA6ZnVuY3Rpb24oZ3JhcGhkaXYpIHtcblxuXHRcdGlmIChncmFwaGRpdikge1xuXHRcdFx0dGhpcy5ncmFwaERpdiA9ICQoXCIjXCIgKyBncmFwaGRpdik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZ3JhcGhEaXYgPSAkKFwiI2dyYXBoRGl2XCIpO1xuICAgICAgICB9XG5cdH0sXG5cblx0Y2xlYXJBbGxTZXRzOmZ1bmN0aW9uKCkge1xuICAgICAgICAkKCcudG9vTXVjaERhdGEnKS5yZW1vdmUoKTtcbiAgICAgICAgdmFyIGRpdnMgPSAgdGhpcy5ncmFwaERpdi5zaWJsaW5ncygpO1xuXG4gICAgICAgIGlmICgkKGRpdnNbMV0pLmZpbmQoIFwic3ZnXCIgKS5sZW5ndGggPT0gMCApe1xuICAgICAgICAgICAgIGQzLnNlbGVjdEFsbChcInN2Z1wiKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGRpdiA9IDE7IGRpdiA8IGRpdnMubGVuZ3RoOyBkaXYrKykge1xuICAgICAgICAgICAgICAgICQoZGl2c1tkaXZdKS5maW5kKFwic3ZnXCIpLnJlbW92ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblx0fSxcblxuXHRhZGROZXdTZXQ6ZnVuY3Rpb24obmV3U2V0LCB0eXBlKSB7XG5cbiAgICAgICAgdmFyIGJ1dHRvbkFyciA9IFN0dWR5SGVscGVyLmdldEJ1dHRvbkVsZW1lbnQodGhpcy5ncmFwaERpdiksXG4gICAgICAgICAgICBzZWxlY3RvciA9IFN0dWR5SGVscGVyLmdldFNlbGVjdG9yRWxlbWVudCh0aGlzLmdyYXBoRGl2KSxcbiAgICAgICAgICAgIHR5cGUgPSBTdHVkeUhlbHBlci5tZWFzdXJlbWVudFR5cGUodHlwZSksXG4gICAgICAgICAgICBidXR0b25zID0ge1xuICAgICAgICAgICAgICAgICdsaW5lJzogYnV0dG9uQXJyWzBdLFxuICAgICAgICAgICAgICAgICdiYXItZW1wdHknOiBidXR0b25BcnJbMV0sXG4gICAgICAgICAgICAgICAgJ2Jhci10aW1lJzogYnV0dG9uQXJyWzJdLFxuICAgICAgICAgICAgICAgICdiYXItbGluZSc6IGJ1dHRvbkFyclszXSxcbiAgICAgICAgICAgICAgICAnYmFyLW1lYXN1cmVtZW50JzogYnV0dG9uQXJyWzRdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VsZWN0b3JzID0ge1xuICAgICAgICAgICAgICAgICdsaW5lJzogc2VsZWN0b3JbMV0sXG4gICAgICAgICAgICAgICAgJ2Jhci10aW1lJzogc2VsZWN0b3JbMl0sXG4gICAgICAgICAgICAgICAgJ2Jhci1saW5lJzogc2VsZWN0b3JbM10sXG4gICAgICAgICAgICAgICAgJ2Jhci1tZWFzdXJlbWVudCc6IHNlbGVjdG9yWzRdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkaXNwbGF5IGdyb3VwZWQgYmFyIGNoYXJ0IGJ5IG1lYXN1cmVtZW50IGlmIG1vc3Qgb2YgdGhlIG1lYXN1cmVtZW50IHR5cGVzIGFyZSBwcm90b2NvbFxuICAgICAgICAgKiAgY3VycmVudGx5IGNvbW1lbnRlZCBvdXQgYmVjYXVzZSB0aGlzIGlzIGJ1Z2d5XG4gICAgICAgICoqL1xuICAgICAgICAvL1N0dWR5SGVscGVyLnNob3dQcm90ZW9taWNHcmFwaCh0eXBlLCBzZWxlY3RvcnMsICdiYXItbWVhc3VyZW1lbnQnLCBidXR0b25zKTtcblxuICAgICAgICAvL2xpbmUgY2hhcnRcbiAgICAgICAgJChidXR0b25zWydsaW5lJ10pLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgU3R1ZHlIZWxwZXIuZGlzcGxheUdyYXBoKHNlbGVjdG9ycywgJ2xpbmUnKTtcbiAgICAgICAgICAgICQoJ2xhYmVsLmJ0bicpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgICAvL2hpZGUgZ3JhcGggb3B0aW9uIGJ1dHRvbnNcbiAgICAgICAgICAgICQoYnV0dG9uc1snYmFyLXRpbWUnXSkuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgJChidXR0b25zWydiYXItbGluZSddKS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAkKGJ1dHRvbnNbJ2Jhci1tZWFzdXJlbWVudCddKS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gd2hlbiB1c2VyIGNsaWNrcyBiYXIgYnV0dG9uLCBzaG93IG9wdGlvbiBidXR0b25zXG4gICAgICAgICQoYnV0dG9uc1snYmFyLWVtcHR5J10pLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAkKGJ1dHRvbnNbJ2Jhci10aW1lJ10pLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICQoYnV0dG9uc1snYmFyLWxpbmUnXSkucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgJChidXR0b25zWydiYXItbWVhc3VyZW1lbnQnXSkucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgJCgnbGFiZWwuYnRuJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9iYXIgY2hhcnQgZ3JvdXBlZCBieSB0aW1lXG4gICAgICAgICQoYnV0dG9uc1snYmFyLXRpbWUnXSkuY2xpY2soZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciByZWN0cyA9IGQzLnNlbGVjdEFsbCgnLmJhclRpbWUgcmVjdCcpWzBdO1xuICAgICAgICAgICAgU3R1ZHlIZWxwZXIuYnV0dG9uRXZlbnRIYW5kbGVyKG5ld1NldCwgZXZlbnQsIHJlY3RzLCAnYmFyLXRpbWUnLCBzZWxlY3RvcnMsIGJ1dHRvbkFycik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vYmFyIGNoYXJ0IGdyb3VwZWQgYnkgbGluZSBuYW1lXG4gICAgICAgICQoYnV0dG9uc1snYmFyLWxpbmUnXSkuY2xpY2soZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciByZWN0cyA9IGQzLnNlbGVjdEFsbCgnLmJhckFzc2F5IHJlY3QnKVswXTtcbiAgICAgICAgICAgIFN0dWR5SGVscGVyLmJ1dHRvbkV2ZW50SGFuZGxlcihuZXdTZXQsIGV2ZW50LCByZWN0cywgJ2Jhci1saW5lJywgc2VsZWN0b3JzLCBidXR0b25BcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL2JhciBjaGFydCBncm91cGVkIGJ5IG1lYXN1cmVtZW50XG4gICAgICAgICQoYnV0dG9uc1snYmFyLW1lYXN1cmVtZW50J10pLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgcmVjdHMgPSBkMy5zZWxlY3RBbGwoJy5iYXJNZWFzdXJlbWVudCByZWN0JylbMF07XG4gICAgICAgICAgICBTdHVkeUhlbHBlci5idXR0b25FdmVudEhhbmRsZXIobmV3U2V0LCBldmVudCwgcmVjdHMsICdiYXItbWVhc3VyZW1lbnQnLCBzZWxlY3RvcnMsIGJ1dHRvbkFycik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBiYXJBc3NheU9iaiAgPSBHcmFwaEhlbHBlck1ldGhvZHMuY29uY2F0QXNzYXlzKG5ld1NldCk7XG5cbiAgICAgICAgLy9kYXRhIGZvciBncmFwaHNcbiAgICAgICAgdmFyIGdyYXBoU2V0ID0ge1xuICAgICAgICAgICAgYmFyQXNzYXlPYmo6IEdyYXBoSGVscGVyTWV0aG9kcy5jb25jYXRBc3NheXMobmV3U2V0KSxcbiAgICAgICAgICAgIGNyZWF0ZV94X2F4aXM6IEdyYXBoSGVscGVyTWV0aG9kcy5jcmVhdGVYQXhpcyxcbiAgICAgICAgICAgIGNyZWF0ZV9yaWdodF95X2F4aXM6IEdyYXBoSGVscGVyTWV0aG9kcy5jcmVhdGVSaWdodFlBeGlzLFxuICAgICAgICAgICAgY3JlYXRlX3lfYXhpczogR3JhcGhIZWxwZXJNZXRob2RzLmNyZWF0ZUxlZnRZQXhpcyxcbiAgICAgICAgICAgIHhfYXhpczogR3JhcGhIZWxwZXJNZXRob2RzLm1ha2VfeF9heGlzLFxuICAgICAgICAgICAgeV9heGlzOiBHcmFwaEhlbHBlck1ldGhvZHMubWFrZV9yaWdodF95X2F4aXMsXG4gICAgICAgICAgICBpbmRpdmlkdWFsRGF0YTogbmV3U2V0LFxuICAgICAgICAgICAgYXNzYXlNZWFzdXJlbWVudHM6IGJhckFzc2F5T2JqLFxuICAgICAgICAgICAgd2lkdGg6IDc1MCxcbiAgICAgICAgICAgIGhlaWdodDogMjIwXG4gICAgICAgIH07XG5cbiAgICAgICAgLy9yZW5kZXIgZGlmZmVyZW50IGdyYXBoc1xuICAgICAgICBjcmVhdGVNdWx0aUxpbmVHcmFwaChncmFwaFNldCwgR3JhcGhIZWxwZXJNZXRob2RzLmNyZWF0ZVN2ZyhzZWxlY3RvclsxXSkpO1xuICAgICAgICBjcmVhdGVHcm91cGVkQmFyR3JhcGgoZ3JhcGhTZXQsIEdyYXBoSGVscGVyTWV0aG9kcy5jcmVhdGVTdmcoc2VsZWN0b3JbMl0pLCAneCcpO1xuICAgICAgICBjcmVhdGVHcm91cGVkQmFyR3JhcGgoZ3JhcGhTZXQsIEdyYXBoSGVscGVyTWV0aG9kcy5jcmVhdGVTdmcoc2VsZWN0b3JbM10pLCAnbmFtZScpO1xuICAgICAgICBjcmVhdGVHcm91cGVkQmFyR3JhcGgoZ3JhcGhTZXQsIEdyYXBoSGVscGVyTWV0aG9kcy5jcmVhdGVTdmcoc2VsZWN0b3JbNF0pLCAnbWVhc3VyZW1lbnQnKTtcblxuICAgICAgICAgdmFyIHJlY3RBc3NheUJhciA9IGQzLnNlbGVjdEFsbCgnLmJhckFzc2F5IHJlY3QnKVswXTtcbiAgICAgICAgIHZhciByZWN0TWVhc0JhciA9IGQzLnNlbGVjdEFsbCgnLmJhck1lYXN1cmVtZW50IHJlY3QnKVswXTtcbiAgICAgICAgIHZhciByZWN0VGltZUJhciA9IGQzLnNlbGVjdEFsbCgnLmJhclRpbWUgcmVjdCcpWzBdO1xuICAgICAgICBpZiAoJChzZWxlY3RvclsyXSkuY3NzKCdkaXNwbGF5JykgPT09ICdibG9jaycpIHtcbiAgICAgICAgICAgICBTdHVkeUhlbHBlci5zdmdXaWR0aChzZWxlY3RvclsyXSwgcmVjdFRpbWVCYXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkKHNlbGVjdG9yWzNdKS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgIFN0dWR5SGVscGVyLnN2Z1dpZHRoKHNlbGVjdG9yWzNdLCByZWN0QXNzYXlCYXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkKHNlbGVjdG9yWzRdKS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgIFN0dWR5SGVscGVyLnN2Z1dpZHRoKHNlbGVjdG9yWzRdLCByZWN0TWVhc0Jhcik7XG4gICAgICAgIH1cblx0XHRpZiAoIW5ld1NldC5sYWJlbCkge1xuXHRcdFx0JCgnI2RlYnVnJykudGV4dCgnRmFpbGVkIHRvIGZldGNoIHNlcmllcy4nKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH0sXG5cbn07Il19