# -*- coding: utf-8 -*-
# Generated by Django 1.9.11 on 2016-11-18 01:28
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
from django.db import migrations, models
import django.db.models.deletion
import main.models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0024_proteinidentifier_accession_id'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='metabolite',
            name='source',
        ),
        migrations.RemoveField(
            model_name='proteinidentifier',
            name='source',
        ),
        migrations.AlterField(
            model_name='assay',
            name='experimenter',
            field=models.ForeignKey(blank=True, help_text='EDD User that set up the experimental conditions of this Assay.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assay_experimenter_set', to=settings.AUTH_USER_MODEL, verbose_name='Experimenter'),
        ),
        migrations.AlterField(
            model_name='assay',
            name='line',
            field=models.ForeignKey(help_text='The Line used for this Assay.', on_delete=django.db.models.deletion.CASCADE, to='main.Line', verbose_name='Line'),
        ),
        migrations.AlterField(
            model_name='assay',
            name='measurement_types',
            field=models.ManyToManyField(help_text='The Measurement Types contained in this Assay.', through='main.Measurement', to='main.MeasurementType', verbose_name='Measurement Types'),
        ),
        migrations.AlterField(
            model_name='assay',
            name='protocol',
            field=models.ForeignKey(help_text='The Protocol used to create this Assay.', on_delete=django.db.models.deletion.PROTECT, to='main.Protocol', verbose_name='Protocol'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='created',
            field=models.ForeignKey(help_text='Update used to create the attachment.', on_delete=django.db.models.deletion.PROTECT, to='main.Update', verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='description',
            field=models.TextField(blank=True, help_text='Description of attachment file contents.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='file',
            field=models.FileField(help_text='Path to file data.', max_length=255, upload_to='%Y/%m/%d', verbose_name='File Path'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='file_size',
            field=models.IntegerField(default=0, help_text='Total byte size of the attachment.', verbose_name='Size'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='filename',
            field=models.CharField(help_text='Name of attachment file.', max_length=255, verbose_name='File Name'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='mime_type',
            field=models.CharField(blank=True, help_text='MIME ContentType of the attachment.', max_length=255, null=True, verbose_name='MIME'),
        ),
        migrations.AlterField(
            model_name='carbonsource',
            name='labeling',
            field=models.TextField(help_text='Description of labeling isotopes in this Carbon Source.', verbose_name='Labeling'),
        ),
        migrations.AlterField(
            model_name='carbonsource',
            name='volume',
            field=models.DecimalField(decimal_places=5, help_text='Volume of solution added as a Carbon Source.', max_digits=16, verbose_name='Volume'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='body',
            field=models.TextField(help_text='Content of the comment.', verbose_name='Comment'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='created',
            field=models.ForeignKey(help_text='Update object logging the creation of this Comment.', on_delete=django.db.models.deletion.PROTECT, to='main.Update', verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='datasource',
            name='created',
            field=models.ForeignKey(editable=False, help_text='Update object logging the creation of this Datasource.', on_delete=django.db.models.deletion.PROTECT, related_name='datasource', to='main.Update', verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='datasource',
            name='download_date',
            field=models.DateField(auto_now=True, help_text='Date when information was accessed and copied.', verbose_name='Download Date'),
        ),
        migrations.AlterField(
            model_name='datasource',
            name='name',
            field=models.CharField(help_text='The source used for information on a measurement type.', max_length=255, verbose_name='Datasource'),
        ),
        migrations.AlterField(
            model_name='datasource',
            name='url',
            field=models.CharField(blank=True, default='', help_text='URL of the source.', max_length=255, verbose_name='URL'),
        ),
        migrations.AlterField(
            model_name='eddobject',
            name='active',
            field=models.BooleanField(default=True, help_text='Flag showing if this object is active and displayed.', verbose_name='Active'),
        ),
        migrations.AlterField(
            model_name='eddobject',
            name='created',
            field=models.ForeignKey(editable=False, help_text='Update used to create this object.', on_delete=django.db.models.deletion.PROTECT, related_name='object_created', to='main.Update', verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='eddobject',
            name='description',
            field=models.TextField(blank=True, help_text='Description of this object.', null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='eddobject',
            name='meta_store',
            field=django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Metadata dictionary.', verbose_name='Metadata'),
        ),
        migrations.AlterField(
            model_name='eddobject',
            name='name',
            field=models.CharField(help_text='Name of this object.', max_length=255, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='eddobject',
            name='updated',
            field=models.ForeignKey(editable=False, help_text='Update used to last modify this object.', on_delete=django.db.models.deletion.PROTECT, related_name='object_updated', to='main.Update', verbose_name='Last Modified'),
        ),
        migrations.AlterField(
            model_name='eddobject',
            name='updates',
            field=models.ManyToManyField(db_table='edd_object_update', help_text='List of Update objects logging changes to this object.', related_name='_eddobject_updates_+', to='main.Update', verbose_name='Updates'),
        ),
        migrations.AlterField(
            model_name='eddobject',
            name='uuid',
            field=models.UUIDField(editable=False, help_text='Unique identifier for this object.', unique=True, verbose_name='UUID'),
        ),
        migrations.AlterField(
            model_name='everyonepermission',
            name='permission_type',
            field=models.CharField(choices=[('N', 'None'), ('R', 'Read'), ('W', 'Write')], default='N', help_text='Type of permission.', max_length=8, verbose_name='Permission'),
        ),
        migrations.AlterField(
            model_name='everyonepermission',
            name='study',
            field=models.ForeignKey(help_text='Study this permission applies to.', on_delete=django.db.models.deletion.CASCADE, to='main.Study', verbose_name='Study'),
        ),
        migrations.AlterField(
            model_name='geneidentifier',
            name='gene_length',
            field=models.IntegerField(blank=True, help_text='Length of the gene nucleotides.', null=True, verbose_name='Length'),
        ),
        migrations.AlterField(
            model_name='geneidentifier',
            name='location_end',
            field=models.IntegerField(blank=True, help_text='Offset location for gene end.', null=True, verbose_name='End'),
        ),
        migrations.AlterField(
            model_name='geneidentifier',
            name='location_in_genome',
            field=models.TextField(blank=True, help_text='Location of this Gene in the organism genome.', null=True, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='geneidentifier',
            name='location_start',
            field=models.IntegerField(blank=True, help_text='Offset location for gene start.', null=True, verbose_name='Start'),
        ),
        migrations.AlterField(
            model_name='geneidentifier',
            name='positive_strand',
            field=models.BooleanField(default=True, help_text='Flag indicating if transcript is positive (sense).', verbose_name='Positive'),
        ),
        migrations.AlterField(
            model_name='grouppermission',
            name='group',
            field=models.ForeignKey(help_text='Group this permission applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='grouppermission_set', to='auth.Group', verbose_name='Group'),
        ),
        migrations.AlterField(
            model_name='grouppermission',
            name='permission_type',
            field=models.CharField(choices=[('N', 'None'), ('R', 'Read'), ('W', 'Write')], default='N', help_text='Type of permission.', max_length=8, verbose_name='Permission'),
        ),
        migrations.AlterField(
            model_name='grouppermission',
            name='study',
            field=models.ForeignKey(help_text='Study this permission applies to.', on_delete=django.db.models.deletion.CASCADE, to='main.Study', verbose_name='Study'),
        ),
        migrations.AlterField(
            model_name='line',
            name='carbon_source',
            field=models.ManyToManyField(blank=True, db_table='line_carbon_source', help_text='Carbon source(s) used in this Line.', to='main.CarbonSource', verbose_name='Carbon Source(s)'),
        ),
        migrations.AlterField(
            model_name='line',
            name='contact',
            field=models.ForeignKey(blank=True, help_text='EDD User to contact about this Line.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='line_contact_set', to=settings.AUTH_USER_MODEL, verbose_name='Contact'),
        ),
        migrations.AlterField(
            model_name='line',
            name='contact_extra',
            field=models.TextField(help_text='Additional field for contact information about this Line (e.g. contact is not a User of EDD).', verbose_name='Contact (extra)'),
        ),
        migrations.AlterField(
            model_name='line',
            name='control',
            field=models.BooleanField(default=False, help_text='Flag indicating whether the sample for this Line is a control.', verbose_name='Control'),
        ),
        migrations.AlterField(
            model_name='line',
            name='experimenter',
            field=models.ForeignKey(blank=True, help_text='EDD User that set up the experimental conditions of this Line.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='line_experimenter_set', to=settings.AUTH_USER_MODEL, verbose_name='Experimenter'),
        ),
        migrations.AlterField(
            model_name='line',
            name='protocols',
            field=models.ManyToManyField(help_text='Protocol(s) used to Assay this Line.', through='main.Assay', to='main.Protocol', verbose_name='Protocol(s)'),
        ),
        migrations.AlterField(
            model_name='line',
            name='replicate',
            field=models.ForeignKey(blank=True, help_text='Indicates that this Line is a (biological) replicate of another Line.', null=True, on_delete=django.db.models.deletion.PROTECT, to='main.Line', verbose_name='Replicate'),
        ),
        migrations.AlterField(
            model_name='line',
            name='strains',
            field=models.ManyToManyField(blank=True, db_table='line_strain', help_text='Strain(s) used in this Line.', to='main.Strain', verbose_name='Strain(s)'),
        ),
        migrations.AlterField(
            model_name='line',
            name='study',
            field=models.ForeignKey(help_text='The Study containing this Line.', on_delete=django.db.models.deletion.CASCADE, to='main.Study', verbose_name='Study'),
        ),
        migrations.AlterField(
            model_name='measurement',
            name='active',
            field=models.BooleanField(default=True, help_text='Flag indicating this Measurement is active and should be displayed.', verbose_name='Active'),
        ),
        migrations.AlterField(
            model_name='measurement',
            name='assay',
            field=models.ForeignKey(help_text='The Assay creating this Measurement.', on_delete=django.db.models.deletion.CASCADE, to='main.Assay', verbose_name='Assay'),
        ),
        migrations.AlterField(
            model_name='measurement',
            name='compartment',
            field=models.CharField(choices=[('0', 'N/A'), ('1', 'Intracellular/Cytosol (Cy)'), ('2', 'Extracellular')], default=0', help_text='Compartment of the cell for this Measurement.', max_length=1, verbose_name='Compartment'),
        ),
        migrations.AlterField(
            model_name='measurement',
            name='experimenter',
            field=models.ForeignKey(blank=True, help_text='EDD User that set up the experimental conditions of this Measurement.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_experimenter_set', to=settings.AUTH_USER_MODEL, verbose_name='Experimenter'),
        ),
        migrations.AlterField(
            model_name='measurement',
            name='measurement_format',
            field=models.CharField(choices=[('0', 'scalar'), ('1', 'vector'), ('2', 'histogram'), ('3', 'sigma')], default=0', help_text='Enumeration of value formats for this Measurement.', max_length=2, verbose_name='Format'),
        ),
        migrations.AlterField(
            model_name='measurement',
            name='measurement_type',
            field=models.ForeignKey(help_text='The type of item measured for this Measurement.', on_delete=django.db.models.deletion.PROTECT, to='main.MeasurementType', verbose_name='Type'),
        ),
        migrations.AlterField(
            model_name='measurement',
            name='meta_store',
            field=django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, help_text='Metadata dictionary.', verbose_name='Metadata'),
        ),
        migrations.AlterField(
            model_name='measurement',
            name='update_ref',
            field=models.ForeignKey(help_text='The Update triggering the setting of this Measurement.', on_delete=django.db.models.deletion.PROTECT, to='main.Update', verbose_name='Updated'),
        ),
        migrations.AlterField(
            model_name='measurement',
            name='x_units',
            field=models.ForeignKey(help_text='The units of the X-axis for this Measurement.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='main.MeasurementUnit', verbose_name='X Units'),
        ),
        migrations.AlterField(
            model_name='measurement',
            name='y_units',
            field=models.ForeignKey(help_text='The units of the Y-axis for this Measurement.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='main.MeasurementUnit', verbose_name='Y Units'),
        ),
        migrations.AlterField(
            model_name='measurementtype',
            name='short_name',
            field=models.CharField(blank=True, help_text='Short name used as an ID for the Measurement Type in SBML output.', max_length=255, null=True, verbose_name='Short Name'),
        ),
        migrations.AlterField(
            model_name='measurementtype',
            name='type_group',
            field=models.CharField(choices=[('_', 'Generic'), ('m', 'Metabolite'), ('g', 'Gene Identifier'), ('p', 'Protein Identifer'), ('h', 'Phosphor')], default='_', help_text='Class of data for this Measurement Type.', max_length=8, verbose_name='Type Group'),
        ),
        migrations.AlterField(
            model_name='measurementtype',
            name='type_name',
            field=models.CharField(help_text='Name of this Measurement Type.', max_length=255, verbose_name='Measurement Type'),
        ),
        migrations.AlterField(
            model_name='measurementtype',
            name='type_source',
            field=models.ForeignKey(blank=True, help_text='Datasource used for characterizing this Measurement Type.', null=True, on_delete=django.db.models.deletion.PROTECT, to='main.Datasource', verbose_name='Datasource'),
        ),
        migrations.AlterField(
            model_name='measurementtype',
            name='uuid',
            field=models.UUIDField(editable=False, help_text='Unique ID for this Measurement Type.', unique=True, verbose_name='UUID'),
        ),
        migrations.AlterField(
            model_name='measurementunit',
            name='alternate_names',
            field=models.CharField(blank=True, help_text='Alternative names for the unit.', max_length=255, null=True, verbose_name='Alternate Names'),
        ),
        migrations.AlterField(
            model_name='measurementunit',
            name='display',
            field=models.BooleanField(default=True, help_text='Flag indicating the units should be displayed along with values.', verbose_name='Display'),
        ),
        migrations.AlterField(
            model_name='measurementunit',
            name='type_group',
            field=models.CharField(choices=[('_', 'Generic'), ('m', 'Metabolite'), ('g', 'Gene Identifier'), ('p', 'Protein Identifer'), ('h', 'Phosphor')], default='_', help_text='Type of measurement for which this unit is used.', max_length=8, verbose_name='Group'),
        ),
        migrations.AlterField(
            model_name='measurementunit',
            name='unit_name',
            field=models.CharField(help_text='Name for unit of measurement.', max_length=255, unique=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='measurementvalue',
            name='measurement',
            field=models.ForeignKey(help_text='The Measurement containing this point of data.', on_delete=django.db.models.deletion.CASCADE, to='main.Measurement', verbose_name='Measurement'),
        ),
        migrations.AlterField(
            model_name='measurementvalue',
            name='updated',
            field=models.ForeignKey(help_text='The Update triggering the setting of this point.', on_delete=django.db.models.deletion.PROTECT, to='main.Update', verbose_name='Updated'),
        ),
        migrations.AlterField(
            model_name='measurementvalue',
            name='x',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=5, max_digits=16), help_text='X-axis value(s) for this point.', size=None, verbose_name='X'),
        ),
        migrations.AlterField(
            model_name='measurementvalue',
            name='y',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=5, max_digits=16), help_text='Y-axis value(s) for this point.', size=None, verbose_name='Y'),
        ),
        migrations.AlterField(
            model_name='metabolite',
            name='carbon_count',
            field=models.IntegerField(help_text='Count of carbons present in this molecule.', verbose_name='Carbon Count'),
        ),
        migrations.AlterField(
            model_name='metabolite',
            name='charge',
            field=models.IntegerField(help_text='The charge of this molecule.', verbose_name='Charge'),
        ),
        migrations.AlterField(
            model_name='metabolite',
            name='molar_mass',
            field=models.DecimalField(decimal_places=5, help_text='Molar mass of this molecule.', max_digits=16, verbose_name='Molar Mass'),
        ),
        migrations.AlterField(
            model_name='metabolite',
            name='molecular_formula',
            field=models.TextField(help_text='Formula string defining this molecule.', verbose_name='Formula'),
        ),
        migrations.AlterField(
            model_name='metabolite',
            name='tags',
            field=django.contrib.postgres.fields.ArrayField(base_field=main.models.VarCharField(), default=[], help_text='List of tags for classifying this molecule.', size=None, verbose_name='Tags'),
        ),
        migrations.AlterField(
            model_name='metaboliteexchange',
            name='exchange_name',
            field=main.models.VarCharField(help_text='The exchange name used in the model.', verbose_name='Exchange Name'),
        ),
        migrations.AlterField(
            model_name='metaboliteexchange',
            name='measurement_type',
            field=models.ForeignKey(blank=True, help_text='Measurement type linked to this exchange reaction in the model.', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.MeasurementType', verbose_name='Measurement Type'),
        ),
        migrations.AlterField(
            model_name='metaboliteexchange',
            name='reactant_name',
            field=main.models.VarCharField(help_text='The reactant name used in for this exchange reaction.', verbose_name='Reactant Name'),
        ),
        migrations.AlterField(
            model_name='metaboliteexchange',
            name='sbml_template',
            field=models.ForeignKey(help_text='The SBML Model containing this exchange reaction.', on_delete=django.db.models.deletion.CASCADE, to='main.SBMLTemplate', verbose_name='SBML Model'),
        ),
        migrations.AlterField(
            model_name='metabolitespecies',
            name='measurement_type',
            field=models.ForeignKey(blank=True, help_text='Mesurement type linked to this species in the model.', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.MeasurementType', verbose_name='Measurement Type'),
        ),
        migrations.AlterField(
            model_name='metabolitespecies',
            name='sbml_template',
            field=models.ForeignKey(help_text='The SBML Model defining this species link to a Measurement Type.', on_delete=django.db.models.deletion.PROTECT, to='main.SBMLTemplate', verbose_name='SBML Model'),
        ),
        migrations.AlterField(
            model_name='metabolitespecies',
            name='species',
            field=main.models.VarCharField(help_text='Species name used in the model for this metabolite.', verbose_name='Species'),
        ),
        migrations.AlterField(
            model_name='metadatagroup',
            name='group_name',
            field=models.CharField(help_text='Name of the group/class of metadata.', max_length=255, unique=True, verbose_name='Group Name'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='default_value',
            field=models.CharField(blank=True, help_text='Default value for this Metadata Type.', max_length=255, verbose_name='Default Value'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='for_context',
            field=models.CharField(choices=[(b'S', 'Study'), (b'L', 'Line'), (b'A', 'Assay')], help_text='Type of EDD Object this Metadata Type may be added to.', max_length=8, verbose_name='Context'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='group',
            field=models.ForeignKey(blank=True, help_text='Group for this Metadata Type', null=True, on_delete=django.db.models.deletion.PROTECT, to='main.MetadataGroup', verbose_name='Group'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='input_size',
            field=models.IntegerField(default=6, help_text='Size of input fields for values of this Metadata Type.', verbose_name='Input Size'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='input_type',
            field=models.CharField(blank=True, help_text='Type of input fields for values of this Metadata Type.', max_length=255, null=True, verbose_name='Input Type'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='postfix',
            field=models.CharField(blank=True, help_text='Postfix text appearing after values of this Metadata Type.', max_length=255, verbose_name='Postfix'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='prefix',
            field=models.CharField(blank=True, help_text='Prefix text appearing before values of this Metadata Type.', max_length=255, verbose_name='Prefix'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='type_class',
            field=models.CharField(blank=True, help_text='Type of data saved for this Metadata Type; blank saves a string type.', max_length=255, null=True, verbose_name='Type Class'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='type_field',
            field=models.CharField(blank=True, default=None, help_text='Model field where metadata is stored; blank stores in metadata dictionary.', max_length=255, null=True, verbose_name='Field Name'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='type_i18n',
            field=models.CharField(blank=True, help_text='i18n key used for naming this Metadata Type.', max_length=255, null=True, verbose_name='i18n Key'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='type_name',
            field=models.CharField(help_text='Name for Metadata Type', max_length=255, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='metadatatype',
            name='uuid',
            field=models.UUIDField(editable=False, help_text='Unique identifier for this Metadata Type.', unique=True, verbose_name='UUID'),
        ),
        migrations.AlterField(
            model_name='phosphor',
            name='emission_wavelength',
            field=models.DecimalField(blank=True, decimal_places=5, help_text='Emission wavelength for the material.', max_digits=16, null=True, verbose_name='Emission'),
        ),
        migrations.AlterField(
            model_name='phosphor',
            name='excitation_wavelength',
            field=models.DecimalField(blank=True, decimal_places=5, help_text='Excitation wavelength for the material.', max_digits=16, null=True, verbose_name='Excitation'),
        ),
        migrations.AlterField(
            model_name='phosphor',
            name='reference_type',
            field=models.ForeignKey(blank=True, help_text='Link to another Measurement Type used as a reference for this type.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='phosphor_set', to='main.MeasurementType', verbose_name='Reference'),
        ),
        migrations.AlterField(
            model_name='proteinidentifier',
            name='accession_id',
            field=main.models.VarCharField(blank=True, help_text='Accession ID for protein characterized in e.g. UniProt.', null=True, verbose_name='Accession ID'),
        ),
        migrations.AlterField(
            model_name='protocol',
            name='categorization',
            field=models.CharField(choices=[('NA', 'None'), ('OD', 'Optical Density'), ('HPLC', 'HPLC'), ('LCMS', 'LCMS'), ('RAMOS', 'RAMOS'), ('TPOMICS', 'Transcriptomics / Proteomics')], default='NA', help_text='Category of this Protocol.', max_length=8, verbose_name='Category'),
        ),
        migrations.AlterField(
            model_name='protocol',
            name='default_units',
            field=models.ForeignKey(blank=True, help_text='Default units for values measured with this Protocol.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='protocol_set', to='main.MeasurementUnit', verbose_name='Default Units'),
        ),
        migrations.AlterField(
            model_name='protocol',
            name='owned_by',
            field=models.ForeignKey(help_text='Owner / maintainer of this Protocol', on_delete=django.db.models.deletion.PROTECT, related_name='protocol_set', to=settings.AUTH_USER_MODEL, verbose_name='Owner'),
        ),
        migrations.AlterField(
            model_name='protocol',
            name='variant_of',
            field=models.ForeignKey(blank=True, help_text='Link to another original Protocol used as basis for this Protocol.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='derived_set', to='main.Protocol', verbose_name='Variant of Protocol'),
        ),
        migrations.AlterField(
            model_name='sbmltemplate',
            name='biomass_calculation',
            field=models.DecimalField(decimal_places=5, default=-1, help_text='The calculated multiplier converting OD to weight of biomass.', max_digits=16, verbose_name='Biomass Factor'),
        ),
        migrations.AlterField(
            model_name='sbmltemplate',
            name='biomass_calculation_info',
            field=models.TextField(default='', help_text='Additional information on biomass calculation.', verbose_name='Biomass Calculation'),
        ),
        migrations.AlterField(
            model_name='sbmltemplate',
            name='biomass_exchange_name',
            field=models.TextField(help_text='The reaction name in the model for Biomass.', verbose_name='Biomass Reaction'),
        ),
        migrations.AlterField(
            model_name='sbmltemplate',
            name='sbml_file',
            field=models.ForeignKey(blank=True, help_text='The Attachment containing the SBML model file.', null=True, on_delete=django.db.models.deletion.PROTECT, to='main.Attachment', verbose_name='SBML Model'),
        ),
        migrations.AlterField(
            model_name='strain',
            name='registry_id',
            field=models.UUIDField(blank=True, help_text='The unique ID of this strain in the ICE Registry.', null=True, verbose_name='Registry UUID'),
        ),
        migrations.AlterField(
            model_name='strain',
            name='registry_url',
            field=models.URLField(blank=True, help_text='The URL of this strain in the ICE Registry.', max_length=255, null=True, verbose_name='Registry URL'),
        ),
        migrations.AlterField(
            model_name='study',
            name='contact',
            field=models.ForeignKey(blank=True, help_text='EDD User to contact about this study.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='contact_study_set', to=settings.AUTH_USER_MODEL, verbose_name='Contact'),
        ),
        migrations.AlterField(
            model_name='study',
            name='contact_extra',
            field=models.TextField(help_text='Additional field for contact information about this study (e.g. contact is not a User of EDD).', verbose_name='Contact (extra)'),
        ),
        migrations.AlterField(
            model_name='study',
            name='metabolic_map',
            field=models.ForeignKey(blank=True, help_text='Metabolic map used by default in this Study.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.SBMLTemplate', verbose_name='Metabolic Map'),
        ),
        migrations.AlterField(
            model_name='study',
            name='protocols',
            field=models.ManyToManyField(blank=True, db_table='study_protocol', help_text='Protocols planned for use in this Study.', to='main.Protocol', verbose_name='Protocols'),
        ),
        migrations.AlterField(
            model_name='study',
            name='slug',
            field=models.SlugField(help_text='Slug text used in links to this Study.', null=True, unique=True, verbose_name='Slug'),
        ),
        migrations.AlterField(
            model_name='update',
            name='mod_by',
            field=models.ForeignKey(editable=False, help_text='The user performing the update.', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterField(
            model_name='update',
            name='mod_time',
            field=models.DateTimeField(auto_now_add=True, help_text='Timestamp of the update.', verbose_name='Modified'),
        ),
        migrations.AlterField(
            model_name='update',
            name='origin',
            field=models.TextField(blank=True, help_text='Host origin of the request triggering this update.', null=True, verbose_name='Origin Host'),
        ),
        migrations.AlterField(
            model_name='update',
            name='path',
            field=models.TextField(blank=True, help_text='URL path used to trigger this update.', null=True, verbose_name='URL Path'),
        ),
        migrations.AlterField(
            model_name='userpermission',
            name='permission_type',
            field=models.CharField(choices=[('N', 'None'), ('R', 'Read'), ('W', 'Write')], default='N', help_text='Type of permission.', max_length=8, verbose_name='Permission'),
        ),
        migrations.AlterField(
            model_name='userpermission',
            name='study',
            field=models.ForeignKey(help_text='Study this permission applies to.', on_delete=django.db.models.deletion.CASCADE, to='main.Study', verbose_name='Study'),
        ),
        migrations.AlterField(
            model_name='userpermission',
            name='user',
            field=models.ForeignKey(help_text='User this permission applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='userpermission_set', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterField(
            model_name='worklistcolumn',
            name='default_value',
            field=models.CharField(blank=True, help_text='Default value for this column.', max_length=255, null=True, verbose_name='Default Value'),
        ),
        migrations.AlterField(
            model_name='worklistcolumn',
            name='heading',
            field=models.CharField(blank=True, help_text='Column header text.', max_length=255, null=True, verbose_name='Heading'),
        ),
        migrations.AlterField(
            model_name='worklistcolumn',
            name='help_text',
            field=models.TextField(blank=True, help_text='UI text to display explaining how to modify this column.', null=True, verbose_name='Help Text'),
        ),
        migrations.AlterField(
            model_name='worklistcolumn',
            name='meta_type',
            field=models.ForeignKey(blank=True, help_text='Type of Metadata in this column.', null=True, on_delete=django.db.models.deletion.PROTECT, to='main.MetadataType', verbose_name='Metadata Type'),
        ),
        migrations.AlterField(
            model_name='worklistcolumn',
            name='ordering',
            field=models.IntegerField(blank=True, help_text='Order this column will appear in worklist export.', null=True, unique=True, verbose_name='Ordering'),
        ),
        migrations.AlterField(
            model_name='worklistcolumn',
            name='template',
            field=models.ForeignKey(help_text='Parent Worklist Template for this column.', on_delete=django.db.models.deletion.CASCADE, to='main.WorklistTemplate', verbose_name='Template'),
        ),
        migrations.AlterField(
            model_name='worklisttemplate',
            name='protocol',
            field=models.ForeignKey(help_text='Default protocol for this Template.', on_delete=django.db.models.deletion.PROTECT, to='main.Protocol', verbose_name='Protocol'),
        ),
    ]
