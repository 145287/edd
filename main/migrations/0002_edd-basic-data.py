# -*- coding: utf-8 -*-
# Generated by Django 1.9.11 on 2016-11-29 00:28
from __future__ import unicode_literals

import json
import logging
import os
import re

from django.conf import settings
from django.contrib.auth import get_user_model
from django.db import migrations

from main.models import MetadataType

from .constants.b_to_uniprot import B_TO_UNIPROT


logger = logging.getLogger(__name__)
carbon_pattern = re.compile(r'C(\d*)')

# These are the metadata types that map directly onto model fields
meta_types = [
    # Study types
    {'type_name': 'Study Name', 'type_i18n': 'Study.name', 'type_field': 'name',
        'input_size': 30, 'for_context': MetadataType.STUDY, },
    {'type_name': 'Study Description', 'type_i18n': 'Study.description',
        'type_field': 'description', 'input_type': 'textarea',
        'for_context': MetadataType.STUDY, },
    {'type_name': 'Study Contact', 'type_i18n': 'Study.contact',
        'type_field': 'contact', 'input_size': 30, 'input_type': 'user',
        'for_context': MetadataType.STUDY, },
    {'type_name': 'Study Contact (external)', 'type_i18n': 'Study.contact_extra',
        'type_field': 'contact_extra', 'input_size': 30,
        'for_context': MetadataType.STUDY, },
    # Line types
    {'type_name': 'Line Name', 'type_i18n': 'Line.name', 'type_field': 'name',
        'input_size': 30, 'for_context': MetadataType.LINE, },
    {'type_name': 'Line Description', 'type_i18n': 'Line.description',
        'type_field': 'description', 'input_type': 'textarea',
        'for_context': MetadataType.LINE, },
    {'type_name': 'Control', 'type_i18n': 'Line.control', 'type_field': 'control',
        'input_type': 'checkbox', 'for_context': MetadataType.LINE, },
    {'type_name': 'Line Contact', 'type_i18n': 'Line.contact',
        'type_field': 'contact', 'input_size': 30, 'input_type': 'user',
        'for_context': MetadataType.LINE, },
    {'type_name': 'Line Experimenter', 'type_i18n': 'Line.experimenter',
        'type_field': 'experimenter', 'input_size': 30, 'input_type': 'user',
        'for_context': MetadataType.LINE, },
    {'type_name': 'Carbon Source(s)', 'type_i18n': 'Line.carbon_source',
        'type_field': 'carbon_source', 'input_size': 30, 'input_type': 'carbon_source',
        'for_context': MetadataType.LINE, },
    {'type_name': 'Strain(s)', 'type_i18n': 'Line.strains',
        'type_field': 'strains', 'input_size': 30, 'input_type': 'strain',
        'for_context': MetadataType.LINE, },
    # Assay types
    {'type_name': 'Assay Name', 'type_i18n': 'Assay.name', 'type_field': 'name',
        'input_size': 30, 'for_context': MetadataType.ASSAY, },
    {'type_name': 'Assay Description', 'type_i18n': 'Assay.description',
        'type_field': 'description', 'input_type': 'textarea',
        'for_context': MetadataType.ASSAY, },
    {'type_name': 'Assay Experimenter', 'type_i18n': 'Assay.experimenter',
        'type_field': 'experimenter', 'input_size': 30, 'input_type': 'user',
        'for_context': MetadataType.ASSAY, },
]


def create_linked_metadata(apps, schema_editor):
    # Using the real type to use the real save() method when calling create()
    for md in meta_types:
        MetadataType.objects.create(**md)


def create_system_user(apps, schema_editor):
    User = get_user_model()
    admin_email = 'root@localhost'
    if settings.ADMINS and len(settings.ADMINS):
        admin_email = settings.ADMINS[0][1]  # grab first admin email
    User.objects.create_superuser('system', admin_email, None)


def remove_linked_metadata(apps, schema_editor):
    MetadataType = apps.get_model('main', 'MetadataType')
    for md in meta_types:
        MetadataType.objects.filter(type_i18n=md['type_i18n']).delete()


def remove_system_user(apps, schema_editor):
    User = get_user_model()
    User.objects.filter(username='system', is_superuser=True).delete()


def extract_carbon_count(formula):
    count = 0
    for match in carbon_pattern.finditer(formula):
        c = match.group(1)
        count = count + (int(c) if c else 1)
    return count


def insert_bigg(apps, schema_editor):
    # these models make use of model functions and/or attributes not captured in migration history
    from main.models import Datasource, MeasurementType, Metabolite, Update
    base_dir = os.path.dirname(__file__)
    data = {}
    try:
        with open(os.path.join(base_dir, 'bigg_import.json')) as bigg_json:
            data = json.load(bigg_json)
        update = Update.load_update(path=__name__)
        ds = Datasource.objects.create(
            created=update,
            name='BIGG',
            url='https://github.com/SBRG/bigg_models',
        )
        for entry in data.get('entries', []):
            Metabolite.objects.create(
                carbon_count=extract_carbon_count(entry[2]),
                charge=entry[3],
                molar_mass=0,
                molecular_formula=entry[2],
                short_name=entry[0],
                type_group=MeasurementType.Group.METABOLITE,
                type_name=entry[1],
                type_source=ds,
            )
    except Exception:
        logger.exception('Failed importing BIGG metabolite list')


def insert_uniprot(apps, schema_editor):
    # these models make use of model functions and/or attributes not captured in migration history
    from main.models import Datasource, ProteinIdentifier, Update
    try:
        update = Update.load_update(path=__name__)
        ds = Datasource.objects.create(
            created=update,
            name='UniProt',
            url='http://www.uniprot.org/uniprot/',
        )
        for entry in B_TO_UNIPROT.itervalues():
            ProteinIdentifier.objects.create(
                accession_id=entry['id'],
                length=entry['length'],
                mass=entry['mass'],
                short_name=entry['id'],
                type_name=entry['name'],
                type_source=ds,
            )
    except Exception:
        logger.exception('Failed importing UniProt protein list')


def remove_bigg(apps, schema_editor):
    Metabolite = apps.get_model('main', 'Metabolite')
    # look for Metabolites having a source coming from this migration file, then delete them
    Metabolite.objects.filter(
        type_source__name='BIGG',
        type_source__created__path=__name__,
    ).delete()


def remove_uniprot(apps, schema_editor):
    ProteinIdentifier = apps.get_model('main', 'ProteinIdentifier')
    # look for Proteins having a source coming from this migration file, then delete them
    ProteinIdentifier.objects.filter(
        type_source__name='UniProt',
        type_source__created__path=__name__,
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0001_edd-schema-init'),
        ('profile', '0002_auto_20150729_1523'),
    ]

    operations = [

        # Create system User
        migrations.RunPython(code=create_system_user, reverse_code=remove_system_user),

        # Create linked Metadata Types
        migrations.RunPython(code=create_linked_metadata, reverse_code=remove_linked_metadata),

        # Create measurement types
        migrations.RunPython(code=insert_bigg, reverse_code=remove_bigg),
        migrations.RunPython(code=insert_uniprot, reverse_code=remove_uniprot),
    ]
