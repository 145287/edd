# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-02-25 18:41
from __future__ import unicode_literals

import logging
import re

from django.db import migrations
from django.db.models import Count

from .constants.b_to_uniprot import B_TO_UNIPROT, NAMES, UNIPROT


logger = logging.getLogger(__name__)
accession_pattern = re.compile(
    r'(?:[a-z]{2}\|)?'  # optional identifier for SwissProt or TrEMBL
    r'([OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9](?:[A-Z][A-Z0-9]{2}[0-9]){1,2})'  # the ID
    r'(?:\|(\w+))?'  # optional name
)


def add_datasource(apps):
    from main.models import Update
    Datasource = apps.get_model('main', 'Datasource')
    MigrateUpdate = apps.get_model('main', 'Update')
    app_update = Update.load_update(path=__name__)
    update = MigrateUpdate.objects.get(pk=app_update.pk)
    return Datasource.objects.create(
        name='UniProt',
        url='http://www.uniprot.org/uniprot/',
        created=update,
    )


def process_uniprot(apps, schema_editor):
    ProteinIdentifier = apps.get_model('main', 'ProteinIdentifier')
    ds = add_datasource(apps)
    qs = ProteinIdentifier.objects.annotate(
        num_studies=Count('measurement__assay__line__study', distinct=True, ),
    )
    updated = update_all_proteins(qs, ds)
    missing = [value for key, value in UNIPROT.iteritems() if key not in updated]
    for uniprot in missing:
        update_protein(ProteinIdentifier(), uniprot, ds)


def update_all_proteins(queryset, datasource):
    updated = set()
    for p in queryset:
        uniprot = B_TO_UNIPROT.get(p.type_name, None)
        match = accession_pattern.match(p.type_name)
        if uniprot:
            updated.add(update_protein(p, uniprot, datasource))
        elif match:
            p.short_name = match.group(1)
            if p.short_name in UNIPROT:
                updated.add(update_protein(p, UNIPROT[p.short_name], datasource))
            elif match.group(2):
                p.type_name = match.group(2)
                p.save()
            else:
                p.save()
        elif p.type_name in NAMES:
            updated.add(update_protein(p, NAMES[p.type_name], datasource))
        elif p.num_studies == 0:
            p.delete()
    return updated


def update_protein(protein, uniprot, datasource):
    protein.type_name = uniprot['name']
    protein.short_name = uniprot['id']
    protein.length = uniprot['length']
    protein.mass = uniprot['mass']
    protein.source = datasource
    protein.save()
    return uniprot['id']


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0011_measurement_meta_store'),
        ('main', '0012_add-protein-fields')
    ]

    operations = [
        migrations.RunPython(process_uniprot),
    ]
