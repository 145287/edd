---
version: '2.1'
networks:
  proxynet: {}
  backnet: {}
volumes:
  pgdata: {}
  solrdata: {}
  attachdata: {}
  staticdata: {}
  redisdata: {}
  tlsdata: {}
services:
  postgres:
    image: postgres:9.6
    restart: always
    networks:
      - backnet
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/healthcheck.sh:/healthcheck.sh
    healthcheck:
      test: ['CMD', '/healthcheck.sh']
      interval: 1m
      timeout: 5s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
    expose:
      - '5432'
    env_file: secrets.env
  redis:
    image: redis:3.2
    restart: always
    networks:
      - backnet
    volumes:
      - redisdata:/data
      - ./redis/healthcheck.sh:/healthcheck.sh
    healthcheck:
      test: ['CMD', '/healthcheck.sh']
      interval: 1m
      timeout: 5s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
    expose:
      - '6379'
    command: redis-server --appendonly yes
  solr:
    build: ./solr/
    image: solr:5.5-edd
    restart: always
    networks:
      - backnet
    volumes:
      - solrdata:/opt/solr/server/solr
    # the built Solr image has a default healthcheck; can override interval etc.
    healthcheck:
      interval: 1m
      timeout: 15s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
    expose:
      - '8983'
  rabbitmq:
    image: rabbitmq:3.6-management
    restart: always
    hostname: rabbitmq
    env_file: secrets.env
    environment:
      HOSTNAME: rabbitmq
      RABBITMQ_DEFAULT_USER: edd_user
      RABBITMQ_DEFAULT_VHOST: edd
      RABBITMQ_NODENAME: rabbit@rabbitmq
    expose:
      - '5672'
      - '15672'
    networks:
      - backnet
    volumes:
      - ./rabbitmq/healthcheck.sh:/healthcheck.sh
    healthcheck:
      test: ['CMD', '/healthcheck.sh']
      interval: 1m
      timeout: 5s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
  flower:
    build: ./flower/
    image: flower:0.9-edd
    restart: always
    env_file: secrets.env
    environment:
      AMQP_ADMIN_HOST: rabbitmq
      AMQP_ADMIN_USERNAME: edd_user
      AMQP_HOST: rabbitmq
      AMQP_USERNAME: edd_user
      FLOWER_URL_PREFIX: flower
    networks:
      - backnet
    depends_on:
      - rabbitmq
    links:
      - rabbitmq
    expose:
      - '5555'
    healthcheck:
      test: ['CMD', '/opt/celery-flower/healthcheck.sh']
      interval: 1m
      timeout: 5s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
  smtp:
    build: ./smtp/
    image: exim4:1.0-edd
    restart: always
    networks:
      - backnet
    expose:
      - '25'
    healthcheck:
      test: ['CMD', '/bin/healthcheck.sh', 'edd']
      interval: 1m
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
  edd:
    build: ./edd/
    image: edd-core:latest
    restart: always
    command: ['application']
    env_file: secrets.env
    environment:
      EDD_DEBUG: "false"
      SEARCH_URL: "solr://solr:8983/solr/"
      # These will not do anything without VIRTUAL_HOST set in override file
      VIRTUAL_NETWORK: "edd_proxynet"
      VIRTUAL_PORT: "8000"
      VIRTUAL_STATIC: "true"
    depends_on:
      - postgres
      - rabbitmq
      - redis
      - solr
    links:
      - postgres
      - rabbitmq
      - redis
      - smtp
      - solr
    expose:
      - '8000'
    networks:
      - backnet
      - proxynet
    volumes:
      - attachdata:/var/www/uploads
      - staticdata:/var/www/static
    healthcheck:
      test: ['CMD', 'curl', '--fail', '-LSs', 'http://localhost:8000/health/']
      interval: 1m
      timeout: 5s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
  worker:
    build: ./edd/
    image: edd-core:latest
    env_file: secrets.env
    environment:
      C_FORCE_ROOT: "true"
      EDD_DEBUG: "false"
      SEARCH_URL: "solr://solr:8983/solr/"
    networks:
      - backnet
    volumes:
      - attachdata:/var/www/uploads
      - staticdata:/var/www/static
    restart: always
    command: [-A, -w, edd, -p, '8000', worker]
    depends_on:
      - edd
      - postgres
      - rabbitmq
      - redis
      - solr
    links:
      - edd
      - postgres
      - rabbitmq
      - redis
      - smtp
      - solr
    healthcheck:
      test: ['CMD', 'celery', 'inspect', 'ping', '-A', 'edd', '--workdir', '/code']
      interval: 1m
      timeout: 20s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
  nginx:
    image: nginx:1.11
    # using container_name means there will only ever be one nginx container!
    container_name: nginx
    restart: always
    networks:
      - proxynet
    volumes:
      - /etc/nginx/conf.d
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - tlsdata:/etc/nginx/certs:ro
      - attachdata:/usr/share/nginx/html/uploads:ro
      - staticdata:/usr/share/nginx/html/static:ro
      - ./nginx/healthcheck.sh:/bin/healthcheck.sh
    healthcheck:
      test: ['CMD', '/bin/healthcheck.sh']
      interval: 1m
      timeout: 5s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
  nginx-gen:
    image: jwilder/docker-gen
    # using container_name means there will only ever be one nginx-gen container!
    container_name: nginx-gen
    entrypoint:
      - '/usr/local/bin/docker-gen'
      - '-watch'
      - '-notify-sighup'
      - 'nginx'
      - '/etc/docker-gen/templates/nginx.tmpl'
      - '/etc/nginx/conf.d/default.conf'
    networks:
      - proxynet
    volumes_from:
      - nginx
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
  letsencrypt:
    # TODO: this should probably get forked;
    #   - the project is not maintained
    #   - has hard dependency on another project (kuba/simp_le) that is not maintained
    #   - same dependency is referencing an older branch that has tests marked as failing
    #   - entire combination has stopped working as Let's Encrypt APIs updated
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt
    depends_on:
      - nginx
      - edd
    networks:
      - proxynet
    volumes_from:
      - nginx
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - tlsdata:/etc/nginx/certs:rw
    environment:
      NGINX_DOCKER_GEN_CONTAINER: nginx-gen
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
