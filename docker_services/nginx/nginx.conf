worker_processes 4;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;

  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;
  ssl_session_tickets off;

  server {
    listen  80 default_server;
    listen  [::]:80 default_server;
    return  301 https://$host$request_uri;
  }

  server {
    listen                    443 ssl http2;
    listen                    [::]:443 ssl http2;

    ssl_certificate           /etc/ssl/edd/certificate.chained.crt;
    ssl_certificate_key       /etc/ssl/edd/certificate.key;

    ssl_dhparam               /etc/ssl/edd/dhparam.pem;

    ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers               'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    # OCSP Stapling
    ssl_stapling              on;
    ssl_stapling_verify       on;
    ssl_trusted_certificate   /etc/ssl/edd/trustchain.crt;
    resolver                  131.243.5.1 8.8.8.8 8.8.4.4;

    # HSTS header (15768000 == 6 months)
    add_header  Strict-Transport-Security max-age=15768000;

    client_body_buffer_size     10k;
    client_header_buffer_size   1k;
    client_max_body_size        50m;
    large_client_header_buffers 2 1k;

    client_body_timeout   12;
    client_header_timeout 12;
    keepalive_timeout     5;
    send_timeout          10;

    gzip             on;
    gzip_comp_level  2;
    gzip_min_length  1000;
    gzip_proxied     expired no-cache no-store private auth;
    gzip_types       text/plain application/x-javascript text/xml text/css application/xml;

    root /var/www;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location /flower {
      return 302 /flower/;
    }
    location /flower/ {
      rewrite ^/flower/(.*)$ /$1 break;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # enable this if and only if you use HTTPS
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $host;
      proxy_redirect off;
      proxy_pass http://flower:5555;
    }

    location /rabbitmq {
      return 302 /rabbitmq/;
    }
    location /rabbitmq/ {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # enable this if and only if you use HTTPS
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://rabbitmq:15672/;
    }

    location /solr {
      return 302 /solr/;
    }
    location /solr/ {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # enable this if and only if you use HTTPS
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://solr:8983/solr/;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # enable this if and only if you use HTTPS
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://appserver:8000;
    }

    # error_page 500 502 503 504 /500.html;
    # location = /500.html {
    #   root /path/to/app/current/public;
    # }
  }
}
